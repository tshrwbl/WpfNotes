<!--Xaml namespaces URI are unique id for that particular namespace-->
<!--You can define complete address of namespace and class or can define a URI in xmlns attribute in assembly info-->

<Window x:Class="WpfNotes.MainWindow"
        ignore:note="defines main window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        ignore:note2="defines main window"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ignore="thisIsIgnored"
        xmlns:local="clr-namespace:WpfNotes"
        xmlns:control="http://Courseware.com/CoursewareLib"
        xmlns:customClass="clr-namespace:ObjectElements"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d ignore"
        Title="Learn WPF "
        Height="600"
        Width="500">
    <!--define mainWindow class-->
    <!--XAML is language to create and instantiate .net objects-->
    <!--All Tags and its attribute will initialize a .net object-->
    <!--That means every thing i write in xaml has equivalent c# code corresponding to it-->
    <!--Animation, style, Data binding can change value of dependency property, A change notification handled by DS will tell UI textbox to update as per-->
    <!--Dependency system has strict order of precedence for these changes by DS services -->

    <!--DS services examples , Parent element property value inheritance, styles, Data binding, User template, Data validation , Animation -->

    <!--Xaml is compiled to BAML , binary application markup language-->
    <!--There are two places in Xaml where you can instantiated a objects , Content property and resource property-->

    <Window.Resources>
        <ResourceDictionary>
            <!--Adding resources from external file-->
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="ResorDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--Resource is a dictionary collection, Hence any object initiated here must have x:key attribute-->
            <customClass:Tour x:Key="tourClass" />
            <Color x:Key="GradientStopColor1">#FFDA463F</Color>
            <RadialGradientBrush x:Key="RadialCol1">
                <GradientStop Color="#FFFFEA00" />
                <GradientStop Color="#FF42FF00"
                              Offset="0.5" />
                <GradientStop Color="AliceBlue"
                              Offset="1" />
            </RadialGradientBrush>
            <Style TargetType="TextBlock"
                   x:Key="stTriggerTb">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver"
                             Value="True">
                        <Setter Property="Background"
                                Value="Aqua" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="TextBlock"
                   x:Key="textBoxStyle">
                <Setter Property="Background"
                        Value="PaleVioletRed">
                </Setter>
            </Style>
            <!--Parent property will be applied to all textBlocks-->
            <Style x:Name="AllInheritThis"
                   TargetType="TextBlock">
                <Setter Property="Background"
                        Value="GreenYellow" />
            </Style>
            <Storyboard x:Key="AnimationForTextBlock"
                        RepeatBehavior="Forever"
                        AutoReverse="True">
                <DoubleAnimation Storyboard.TargetName="AnimatedTextBlock"
                                 Storyboard.TargetProperty="FontSize"
                                 To="24"
                                 From="18"
                                 Duration="0:0:2" />
            </Storyboard>
            <Thickness x:Key="tbMargin">1</Thickness>
        </ResourceDictionary>

    </Window.Resources>

    <!--Content-->
    <!--Content is way to show information in xaml application , It has special meaning in xaml -->
    <!--content property can be inferred automatically by xaml, removing window.content tag will also work here-->
    <!--Here window can only contain one Object in content , we can not add more than one -->
    <!--Windows content property is object type, But generally gets assigned to UI element-->

    <!--Dependency Properties-->
    <!--As a developer, you need to register property eg FontSize into dependency system -->
    <!-- Once done, the dependency system takes over. It handles access to the property , memory allocation and change notification-->
    <!-- Control eg TextBox dont allocate dependency property into its own memory, instead it is allocated on sparse memory handled by dependency system. Even if textBox have 70 property registered, Memory is allocated only when that property is set-->
    <!-- WPF resolves conflict in writing dependency property by predefined order of precedence-->

    <!--<Window.Content>-->
    <!--Name of content property is defined [ContentProperty("Eg")] attribute-->

    <!-- This can be initiated here as a .net object <customClass:Tour></customClass:Tour>-->
    <!-- Stack panel has UI Element collection as content property-->
    <!--It can have multiple UI element initiated in it, but it has to be derived from UIELement-->
    <!--Content Property :  UIElementCollection Children , Same for all panel in WPF-->
    <StackPanel >
        <!--Other Panels -->
        <!-- Canvas : used for absolute positioning of children-->
        <!-- WrapPanel : stackpanel but horizontal-->
        <!-- Grid : arrange ui elements in columns and rows -->
        <!-- DockPanel : docking UI elements left right top left -->

        <StackPanel.Resources>
            <Style x:Name="marginSetter"
                   TargetType="{x:Type Rectangle}">
                <Setter Property="Margin"
                        Value="{StaticResource tbMargin}" />
            </Style>
        </StackPanel.Resources>

        <!--Error : not a UIElement <customClass:Tour />, But orb can be added as its derived from UIelement-->
        <customClass:Orb />

        <!--Content Property - Not present for rect-->
        <Rectangle Fill="{StaticResource RadialCol1}"
                   Height="42"
                   Width="32"
                   Margin="0,0,0,-30" />

        <!--Content Property - Not present for Ellipse-->
        <Ellipse Height="100"
                 Opacity=".70"
                 Width="150"
                 Margin="10"
                 MouseEnter="Ellipse_MouseEnter"
                 MouseLeave="Ellipse_MouseLeave">
            <!--Example of Events in wpf-->
            <Ellipse.Fill>
                <!--Attributes can be set from property attributes or property element-->
                <RadialGradientBrush>
                    <GradientStop Color="{DynamicResource GradientStopColor1}" />
                    <GradientStop Color="#FFF1FF01"
                                  Offset="1" />
                    <GradientStop Color="#FFD2CCB4"
                                  Offset="0.637" />
                </RadialGradientBrush>
            </Ellipse.Fill>
        </Ellipse>

        <!-- Content Property : object Content , for all contentControls , Label, Tooltip, CheckBox, RadioButton -->
        <Button Height="20">
            <TextBox FontWeight="Bold">
                Hello there
            </TextBox>
        </Button>

        <Label FontSize="9"
               HorizontalAlignment="Center"
               Background="{DynamicResource LabelBackground1}">
            <!--Instantiate datetime, Calls to string on the object -->
            <system:DateTime>
                07/19/2022
            </system:DateTime>
        </Label>
        <Label FontSize="9"
               HorizontalAlignment="Center"
               Background="{DynamicResource LabelBackground1}">

            <customClass:Tour TourName="Lets go"
                              City="Mumbai" />
        </Label>

        <!-- Content property : ItemCollection Items -->
        <!--Other ItemControls available, Combobox , ListView-->
        <!--They support Data template and data binding-->
        <ListBox x:Name="ListBoxExm">
            <ListBox.Resources>
                <RadialGradientBrush x:Key="RadialCol1">
                    <GradientStop Color="#FFFFEA00" />
                </RadialGradientBrush>
            </ListBox.Resources>
            <!-- ListBoxItem Derives form contentControl class, it can take 'Object Content' as a content property-->
            <!-- Same goes for ListViewItem, ComboboxItem-->
            <ListBoxItem IsSelected="true">
                Hello There
            </ListBoxItem>
            <!--ListBoxItem can also be automatically inferred by wpf-->
            <Rectangle Width="30"
                       Height="20"
                       Fill="{DynamicResource RadialCol1}" />
            <!--Sequence of resource lookup, Control -> Window -> App , Hence control resource will be picked up here -->
        </ListBox>
        <!--Precedence for conflict 1. animation 2. Local values 3.Templates 4.Triggers 5.Style Setter 6.Property Inheritance 7.Default value-->
        <!--Dependency property can have default ,local , inherited from parent value. -->
        <TextBlock Style="{StaticResource textBoxStyle}"
                   Text="FontWeight Default BG style Setter" />
        <TextBlock Style="{StaticResource stTriggerTb}"
                   FontWeight="ExtraBold"
                   Text="FontWeight Local BG trigger" />
        <DockPanel  TextElement.FontWeight="Light"
                    TextBlock.FontSize="20">
            <!-- These are attach properties-->
            <!-- We can declare any attach property with dot operator, It will be used at parent or child level only if that class is present-->
            <TextBlock x:Name="AnimatedTextBlock"
                       Style="{StaticResource textBoxStyle}"
                       Background="Aquamarine"
                       FontSize="7"
                       DockPanel.Dock="Left"
                       Grid.Row="0"
                       ignore:gr="Grid.Row will be registed at DP but will be ignored"
                       Text="FontWeight Inherited BG local" />
            <Button Click="Button_Click"
                    DockPanel.Dock="Right"
                    HorizontalAlignment="Right"
                    Margin="10,0,0,0"
                    Content="Animate" />
        </DockPanel>
        <!--Dependency property CustomProp will set new and old value-->

        <local:CustomControl CustomProp="10"
                             MouseEnter="CustomControl_MouseEnter" />

        <!-- StartBorderLine is custom dependency property which use type converter to convert string into a class-->
        <!-- You can assign a TypeConverter class derivate to property or class level -->
        <local:ConverterPract Height="35"
                              Width="146"
                              StarBorderLine="0 ,30" />

        <!--    Markup extension,
        usually parser run type converter for the class/property to get the value
        This value generation happens at compile time. Markup extension works at runtime.
        You have to provide {} curly braces to invoke a instance of markup class mentioned. 
        You have to set all mandatory property from same sentense
        You can nest markup calls too to get nested returns
        Common types 
            StaticResource : get resource from resorDict from key provided
            DynamicResource : Same as static but updates when resource dictionary item changes value during runtime
            x:Static  : Gets static value from class
            x:Type : get type for Type Property eg, TargetType of style
            Binding : You value from dataSource and assign it to property
            TemplateBinding : 
        -->
        <Slider x:Name="WidthValue"></Slider>
        <Rectangle  Fill="{StaticResource ResourceKey=OpaqColRed }"
                    Stroke="{x:Static SystemColors.ControlDarkBrush}"
                    Height="16" />
        <Ellipse  Fill="{DynamicResource ResourceKey=SolidColReddish }"
                    StrokeThickness="4"
                    Stroke="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                    Height="16" />

    </StackPanel>
    <!--</Window.Content> this is inferred automatically , no need to mention this-->

</Window>
